
Practica4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  000002d2  00000366  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800112  00800112  00000378  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000378  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000003e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009b9  00000000  00000000  00000428  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000071b  00000000  00000000  00000de1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003d3  00000000  00000000  000014fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a0  00000000  00000000  000018d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000478  00000000  00000000  00001970  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001c9  00000000  00000000  00001de8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001fb1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__vector_3>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 31 01 	jmp	0x262	; 0x262 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ed       	ldi	r30, 0xD2	; 210
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e1       	ldi	r26, 0x12	; 18
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 31       	cpi	r26, 0x1A	; 26
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 83 00 	call	0x106	; 0x106 <main>
  9e:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initADC>:
	
	sei(); //Activar interrupciones
}

void initADC(){
	ADMUX = 0;
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	10 82       	st	Z, r1
	ADMUX |= (1<<REFS0);  //Referencia AVCC = 5V
  ac:	80 81       	ld	r24, Z
  ae:	80 64       	ori	r24, 0x40	; 64
  b0:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS1); //Justificación a la izquierda
  b2:	80 81       	ld	r24, Z
  b4:	8f 77       	andi	r24, 0x7F	; 127
  b6:	80 83       	st	Z, r24
	ADMUX |= (1<<ADLAR); 
  b8:	80 81       	ld	r24, Z
  ba:	80 62       	ori	r24, 0x20	; 32
  bc:	80 83       	st	Z, r24
	ADCSRA = 0;
  be:	ea e7       	ldi	r30, 0x7A	; 122
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	10 82       	st	Z, r1
	ADCSRA |= (1<<ADIE);  //Habilitando interrupcion de ADC
  c4:	80 81       	ld	r24, Z
  c6:	88 60       	ori	r24, 0x08	; 8
  c8:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);  //Habilitando prescaler de 16M/128 frecuencia = 125Khz
  ca:	80 81       	ld	r24, Z
  cc:	87 60       	ori	r24, 0x07	; 7
  ce:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN);   //Habilitando el ADC
  d0:	80 81       	ld	r24, Z
  d2:	80 68       	ori	r24, 0x80	; 128
  d4:	80 83       	st	Z, r24
  d6:	08 95       	ret

000000d8 <setup>:
	
int ADCMAYOR = 0, ADCMENOR = 0;


void setup(void){
	DDRB = 0b00111100;   //PB0, PB1 como entrada. PB2, PB3, PB4, PB5 como salida
  d8:	8c e3       	ldi	r24, 0x3C	; 60
  da:	84 b9       	out	0x04, r24	; 4
	PORTB = 0b00000011;		//pull up encendido en PB0 y PB1
  dc:	83 e0       	ldi	r24, 0x03	; 3
  de:	85 b9       	out	0x05, r24	; 5
	
	DDRD = 0b11111111;  //Salida hacia LEDs
  e0:	8f ef       	ldi	r24, 0xFF	; 255
  e2:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0b00000000;	//Iniciamos los leds apagados
  e4:	1b b8       	out	0x0b, r1	; 11
	UCSR0B = 0;  //Usar los pines TX y RX como digitales
  e6:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	
	PCMSK0 |= (1<<0)|(1<<1); //PCINT0, PCINT1
  ea:	eb e6       	ldi	r30, 0x6B	; 107
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	83 60       	ori	r24, 0x03	; 3
  f2:	80 83       	st	Z, r24
	PCICR |= (1<<0); //Mascara de interrupción
  f4:	e8 e6       	ldi	r30, 0x68	; 104
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	81 60       	ori	r24, 0x01	; 1
  fc:	80 83       	st	Z, r24
	initADC();
  fe:	0e 94 53 00 	call	0xa6	; 0xa6 <initADC>
	
	sei(); //Activar interrupciones
 102:	78 94       	sei
 104:	08 95       	ret

00000106 <main>:



int main(void)
{
    setup();
 106:	0e 94 6c 00 	call	0xd8	; 0xd8 <setup>
	
    while (1) 
    {
		
		PORTB ^= (1<<2);   //ENCENDER LEDS
 10a:	95 b1       	in	r25, 0x05	; 5
 10c:	84 e0       	ldi	r24, 0x04	; 4
 10e:	89 27       	eor	r24, r25
 110:	85 b9       	out	0x05, r24	; 5
        PORTD=conteo;  //Mostrar el conteo de los LEDs 
 112:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <conteo>
 116:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 118:	8f eb       	ldi	r24, 0xBF	; 191
 11a:	9d e5       	ldi	r25, 0x5D	; 93
 11c:	01 97       	sbiw	r24, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <main+0x16>
 120:	00 c0       	rjmp	.+0      	; 0x122 <main+0x1c>
 122:	00 00       	nop
		
		_delay_ms(6);
		PORTB ^= (1<<2) | (1<<3);  //ENCENDER DISPLAY 1 Y APAGAR LEDS
 124:	95 b1       	in	r25, 0x05	; 5
 126:	8c e0       	ldi	r24, 0x0C	; 12
 128:	89 27       	eor	r24, r25
 12a:	85 b9       	out	0x05, r24	; 5
		PORTD = lista[ADCMAYOR];   //Mostrar el dato del display 1
 12c:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <ADCMAYOR>
 130:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <ADCMAYOR+0x1>
 134:	ee 5f       	subi	r30, 0xFE	; 254
 136:	fe 4f       	sbci	r31, 0xFE	; 254
 138:	80 81       	ld	r24, Z
 13a:	8b b9       	out	0x0b, r24	; 11
 13c:	8f eb       	ldi	r24, 0xBF	; 191
 13e:	9d e5       	ldi	r25, 0x5D	; 93
 140:	01 97       	sbiw	r24, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <main+0x3a>
 144:	00 c0       	rjmp	.+0      	; 0x146 <main+0x40>
 146:	00 00       	nop
		
		_delay_ms(6);
		PORTB ^=  (1<<3)| (1<<4);   //ENCENDER DISPLAY 2 Y APAGAR DISPLAY 1
 148:	95 b1       	in	r25, 0x05	; 5
 14a:	88 e1       	ldi	r24, 0x18	; 24
 14c:	89 27       	eor	r24, r25
 14e:	85 b9       	out	0x05, r24	; 5
		PORTD = lista[ADCMENOR];   //Mostrar el dato del display 2
 150:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <__data_end>
 154:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <__data_end+0x1>
 158:	ee 5f       	subi	r30, 0xFE	; 254
 15a:	fe 4f       	sbci	r31, 0xFE	; 254
 15c:	80 81       	ld	r24, Z
 15e:	8b b9       	out	0x0b, r24	; 11
 160:	8f eb       	ldi	r24, 0xBF	; 191
 162:	9d e5       	ldi	r25, 0x5D	; 93
 164:	01 97       	sbiw	r24, 0x01	; 1
 166:	f1 f7       	brne	.-4      	; 0x164 <main+0x5e>
 168:	00 c0       	rjmp	.+0      	; 0x16a <main+0x64>
 16a:	00 00       	nop
		
		_delay_ms(6);
		PORTB ^=  (1<<4);   //APAGAR DISPLAY 2
 16c:	95 b1       	in	r25, 0x05	; 5
 16e:	80 e1       	ldi	r24, 0x10	; 16
 170:	89 27       	eor	r24, r25
 172:	85 b9       	out	0x05, r24	; 5
		
		ADCSRA |=(1<<ADSC);  //Leer ADC0
 174:	ea e7       	ldi	r30, 0x7A	; 122
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	80 81       	ld	r24, Z
 17a:	80 64       	ori	r24, 0x40	; 64
 17c:	80 83       	st	Z, r24
		
		if(dato3 > 1){   //Cuando se mueva el potenciometro
 17e:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <dato3>
 182:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <dato3+0x1>
 186:	82 30       	cpi	r24, 0x02	; 2
 188:	91 05       	cpc	r25, r1
 18a:	24 f1       	brlt	.+72     	; 0x1d4 <main+0xce>
			if(dato3 > conteo){  //Verificar si mayor el ADC
 18c:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <conteo>
 190:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <conteo+0x1>
 194:	28 17       	cp	r18, r24
 196:	39 07       	cpc	r19, r25
 198:	54 f4       	brge	.+20     	; 0x1ae <main+0xa8>
			PORTB |= (1<<5);  //Encender LED de alarma
 19a:	85 b1       	in	r24, 0x05	; 5
 19c:	80 62       	ori	r24, 0x20	; 32
 19e:	85 b9       	out	0x05, r24	; 5
			activa1 = 2;  //activa el else
 1a0:	82 e0       	ldi	r24, 0x02	; 2
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1a8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 1ac:	ae cf       	rjmp	.-164    	; 0x10a <main+0x4>
			}
			else{
				if(activa1 == 2){   //Si conteo es menor
 1ae:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1b2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1b6:	02 97       	sbiw	r24, 0x02	; 2
 1b8:	51 f4       	brne	.+20     	; 0x1ce <main+0xc8>
					PORTB ^= (1<<5);  //Apaga el LED
 1ba:	95 b1       	in	r25, 0x05	; 5
 1bc:	80 e2       	ldi	r24, 0x20	; 32
 1be:	89 27       	eor	r24, r25
 1c0:	85 b9       	out	0x05, r24	; 5
					activa1 = 1;  //Desactiva el else
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1ca:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
				}
				PORTB |= (0<<5);  //Mantiene apagado el LED
 1ce:	85 b1       	in	r24, 0x05	; 5
 1d0:	85 b9       	out	0x05, r24	; 5
 1d2:	9b cf       	rjmp	.-202    	; 0x10a <main+0x4>
			}
		}
		else{      //Se repite el else cuando esta fuera de la función
			if(activa1 == 2){
 1d4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1d8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1dc:	02 97       	sbiw	r24, 0x02	; 2
 1de:	51 f4       	brne	.+20     	; 0x1f4 <main+0xee>
				PORTB ^= (1<<5);
 1e0:	95 b1       	in	r25, 0x05	; 5
 1e2:	80 e2       	ldi	r24, 0x20	; 32
 1e4:	89 27       	eor	r24, r25
 1e6:	85 b9       	out	0x05, r24	; 5
				activa1 = 1;
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1f0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			}
			PORTB |= (0<<5);
 1f4:	85 b1       	in	r24, 0x05	; 5
 1f6:	85 b9       	out	0x05, r24	; 5
 1f8:	88 cf       	rjmp	.-240    	; 0x10a <main+0x4>

000001fa <__vector_3>:
	}

}


ISR(PCINT0_vect){
 1fa:	1f 92       	push	r1
 1fc:	0f 92       	push	r0
 1fe:	0f b6       	in	r0, 0x3f	; 63
 200:	0f 92       	push	r0
 202:	11 24       	eor	r1, r1
 204:	8f 93       	push	r24
 206:	9f 93       	push	r25
	
	
	if(((PINB) & (1<<0)) == 0){   //Condicional que compara si se presionó el pulsador 1
 208:	18 99       	sbic	0x03, 0	; 3
 20a:	12 c0       	rjmp	.+36     	; 0x230 <__vector_3+0x36>
		conteo ++;           //Aumenta el valor del contador 
 20c:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <conteo>
 210:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <conteo+0x1>
 214:	01 96       	adiw	r24, 0x01	; 1
 216:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <conteo+0x1>
 21a:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <conteo>
		if(conteo >= 255){   //Bloqueo de conteo a 255
 21e:	8f 3f       	cpi	r24, 0xFF	; 255
 220:	91 05       	cpc	r25, r1
 222:	34 f0       	brlt	.+12     	; 0x230 <__vector_3+0x36>
			conteo = 255;
 224:	8f ef       	ldi	r24, 0xFF	; 255
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <conteo+0x1>
 22c:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <conteo>
		}
		
	}
	
	if(((PINB) & (1<<1)) == 0){   //Condicional que compara si se presionó el pulsador 2
 230:	19 99       	sbic	0x03, 1	; 3
 232:	10 c0       	rjmp	.+32     	; 0x254 <__vector_3+0x5a>
			conteo --;     // Resta el valor del contador
 234:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <conteo>
 238:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <conteo+0x1>
 23c:	01 97       	sbiw	r24, 0x01	; 1
 23e:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <conteo+0x1>
 242:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <conteo>
				if(conteo <= 0){  //Bloqueo de conteo a 0
 246:	18 16       	cp	r1, r24
 248:	19 06       	cpc	r1, r25
 24a:	24 f0       	brlt	.+8      	; 0x254 <__vector_3+0x5a>
					conteo = 0;
 24c:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <conteo+0x1>
 250:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <conteo>
				}
		}
}
 254:	9f 91       	pop	r25
 256:	8f 91       	pop	r24
 258:	0f 90       	pop	r0
 25a:	0f be       	out	0x3f, r0	; 63
 25c:	0f 90       	pop	r0
 25e:	1f 90       	pop	r1
 260:	18 95       	reti

00000262 <__vector_21>:


ISR(ADC_vect){
 262:	1f 92       	push	r1
 264:	0f 92       	push	r0
 266:	0f b6       	in	r0, 0x3f	; 63
 268:	0f 92       	push	r0
 26a:	11 24       	eor	r1, r1
 26c:	2f 93       	push	r18
 26e:	3f 93       	push	r19
 270:	8f 93       	push	r24
 272:	9f 93       	push	r25
 274:	ef 93       	push	r30
 276:	ff 93       	push	r31
	dato3 = ADCH;   //Contador general
 278:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <dato3+0x1>
 282:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <dato3>
	
		uint16_t adc_val16 = ADC;   //Se leer el valor del ADC
 286:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 28a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
		uint8_t adcValue = (adc_val16 >> 8);  //Corrimiento
 28e:	89 2f       	mov	r24, r25
 290:	99 27       	eor	r25, r25
		
		ADCMAYOR = adcValue >> 4;   //Se separan los valores de 0 a 255 de 8 bits, a dos arreglos de 4 bits
 292:	28 2f       	mov	r18, r24
 294:	22 95       	swap	r18
 296:	2f 70       	andi	r18, 0x0F	; 15
 298:	30 e0       	ldi	r19, 0x00	; 0
 29a:	30 93 15 01 	sts	0x0115, r19	; 0x800115 <ADCMAYOR+0x1>
 29e:	20 93 14 01 	sts	0x0114, r18	; 0x800114 <ADCMAYOR>
		ADCMENOR = adcValue & 0x0F;
 2a2:	8f 70       	andi	r24, 0x0F	; 15
 2a4:	99 27       	eor	r25, r25
 2a6:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <__data_end+0x1>
 2aa:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
	  ADCSRA |= (1<<ADIF); //Se borra la bandera de interrupción
 2ae:	ea e7       	ldi	r30, 0x7A	; 122
 2b0:	f0 e0       	ldi	r31, 0x00	; 0
 2b2:	80 81       	ld	r24, Z
 2b4:	80 61       	ori	r24, 0x10	; 16
 2b6:	80 83       	st	Z, r24

}
 2b8:	ff 91       	pop	r31
 2ba:	ef 91       	pop	r30
 2bc:	9f 91       	pop	r25
 2be:	8f 91       	pop	r24
 2c0:	3f 91       	pop	r19
 2c2:	2f 91       	pop	r18
 2c4:	0f 90       	pop	r0
 2c6:	0f be       	out	0x3f, r0	; 63
 2c8:	0f 90       	pop	r0
 2ca:	1f 90       	pop	r1
 2cc:	18 95       	reti

000002ce <_exit>:
 2ce:	f8 94       	cli

000002d0 <__stop_program>:
 2d0:	ff cf       	rjmp	.-2      	; 0x2d0 <__stop_program>
